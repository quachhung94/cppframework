/****************************************************
 *  ocpp_types.h
 *  Created on: 19-Jun-2020 10:36:24 AM
 *  Implementation of the Enumeration ocpp_status_t
 *  Original author: sonlq
 ****************************************************/

#if !defined(_OCPP_TYPES_H_)
#define _OCPP_TYPES_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stdbool.h>
#include <stdint.h>
#include <unistd.h>

typedef enum _OCPP_STATUS_T_ { E_NG_OCPP = 0, E_ALREADY_INITIALIZED_OCPP, E_OK_OCPP } ocpp_status_t;

typedef enum _EVENT_STATUS_ {
    STATUS_NORMAL = 0,
    STATUS_TIMEOUT,
    STATUS_ERROR,
} event_status;

typedef enum _ocpp_event_t_ {
    OCPP_EVENT_AUTHORIZE_RESPONSE,
    OCPP_EVENT_BOOT_NOTIFICATION_RESPONSE,
    OCPP_EVENT_CANCEL_RESERVATION_REQUEST,
    OCPP_EVENT_CERTIFICATE_SIGNED_REQUEST,
    OCPP_EVENT_CHANGE_AVAILABILITY_REQUEST,
    OCPP_EVENT_CLEAR_CACHE_REQUEST,
    OCPP_EVENT_CLEAR_CHARGING_PROFILE_REQUEST,
    OCPP_EVENT_CLEAR_DISPLAY_MESSAGE_REQUEST,
    OCPP_EVENT_CLEAR_VARIABLE_MONITORING_REQUEST,
    OCPP_EVENT_CLEARED_CHARGING_LIMIT_RESPONSE,
    OCPP_EVENT_COST_UPDATED_REQUEST,
    OCPP_EVENT_CUSTOMER_INFORMATION_REQUEST,
    OCPP_EVENT_DATA_TRANSFER_RESPONSE,
    OCPP_EVENT_DELETE_CERTIFICATE_REQUEST,
    OCPP_EVENT_FIRMWARE_STATUS_NOTIFICATION_RESPONSE,
    OCPP_EVENT_GET15118_EV_CERTIFICATE_RESPONSE,
    OCPP_EVENT_GET_BASE_REPORT_REQUEST,
    OCPP_EVENT_GET_CERTIFICATE_STATUS_RESPONSE,
    OCPP_EVENT_GET_CHARGING_PROFILES_REQUEST,
    OCPP_EVENT_GET_COMPOSITE_SCHEDULE_REQUEST,
    OCPP_EVENT_GET_DISPLAY_MESSAGES_REQUEST,
    OCPP_EVENT_GET_INSTALLED_CERTIFICATE_IDS_REQUEST,
    OCPP_EVENT_GET_LOCAL_LIST_VERSION_REQUEST,
    OCPP_EVENT_GET_LOG_REQUEST,
    OCPP_EVENT_GET_MONITORING_REPORT_REQUEST,
    OCPP_EVENT_GET_REPORT_REQUEST,
    OCPP_EVENT_GET_TRANSACTION_STATUS_REQUEST,
    OCPP_EVENT_GET_VARIABLES_REQUEST,
    OCPP_EVENT_HEARTBEAT_RESPONSE,
    OCPP_EVENT_INSTALL_CERTIFICATE_REQUEST,
    OCPP_EVENT_LOG_STATUS_NOTIFICATION_RESPONSE,
    OCPP_EVENT_METER_VALUES_RESPONSE,
    OCPP_EVENT_NOTIFY_CHARGING_LIMIT_RESPONSE,
    OCPP_EVENT_NOTIFY_CUSTOMER_INFORMATION_RESPONSE,
    OCPP_EVENT_NOTIFY_DISPLAY_MESSAGES_RESPONSE,
    OCPP_EVENT_NOTIFY_EV_CHARGING_NEEDS_RESPONSE,
    OCPP_EVENT_NOTIFY_EV_CHARGING_SCHEDULE_RESPONSE,
    OCPP_EVENT_NOTIFY_EVENT_RESPONSE,
    OCPP_EVENT_NOTIFY_MONITORING_REPORT_RESPONSE,
    OCPP_EVENT_NOTIFY_REPORT_RESPONSE,
    OCPP_EVENT_PUBLISH_FIRMWARE_REQUEST,
    OCPP_EVENT_PUBLISH_FIRMWARE_STATUS_NOTIFICATION_RESPONSE,
    OCPP_EVENT_REPORT_CHARGING_PROFILES_RESPONSE,
    OCPP_EVENT_REQUEST_START_TRANSACTION_REQUEST,
    OCPP_EVENT_REQUEST_STOP_TRANSACTION_REQUEST,
    OCPP_EVENT_RESERVATION_STATUS_UPDATE_RESPONSE,
    OCPP_EVENT_RESERVE_NOW_REQUEST,
    OCPP_EVENT_RESET_REQUEST,
    OCPP_EVENT_SECURITY_EVENT_NOTIFICATION_RESPONSE,
    OCPP_EVENT_SEND_LOCAL_LIST_REQUEST,
    OCPP_EVENT_SET_CHARGING_PROFILE_REQUEST,
    OCPP_EVENT_SET_DISPLAY_MESSAGE_REQUEST,
    OCPP_EVENT_SET_MONITORING_BASE_REQUEST,
    OCPP_EVENT_SET_MONITORING_LEVEL_REQUEST,
    OCPP_EVENT_SET_NETWORK_PROFILE_REQUEST,
    OCPP_EVENT_SET_VARIABLE_MONITORING_REQUEST,
    OCPP_EVENT_SET_VARIABLES_REQUEST,
    OCPP_EVENT_SIGN_CERTIFICATE_RESPONSE,
    OCPP_EVENT_STATUS_NOTIFICATION_RESPONSE,
    OCPP_EVENT_TRANSACTION_EVENT_RESPONSE,
    OCPP_EVENT_TRIGGER_MESSAGE_REQUEST,
    OCPP_EVENT_UNLOCK_CONNECTOR_REQUEST,
    OCPP_EVENT_UNPUBLISH_FIRMWARE_REQUEST,
    OCPP_EVENT_UPDATE_FIRMWARE_REQUEST,

    OCPP_EVENT_OCPP,
    OCPP_EVENT_SERVER_CONNECTED,
    OCPP_EVENT_SERVER_DISCONNECTED,
    OCPP_EVENT_NUM,
    OCPP_EVENT_ALL = OCPP_EVENT_NUM
} ocpp_event_t;

typedef enum _MESSAGE_TYPE_ {
    AUTHORIZE_REQUEST,
    AUTHORIZE_RESPONSE,
    BOOT_NOTIFICATION_REQUEST,
    BOOT_NOTIFICATION_RESPONSE,
    CANCEL_RESERVATION_REQUEST,
    CANCEL_RESERVATION_RESPONSE,
    CERTIFICATE_SIGNED_REQUEST,
    CERTIFICATE_SIGNED_RESPONSE,
    CHANGE_AVAILABILITY_REQUEST,
    CHANGE_AVAILABILITY_RESPONSE,
    CLEAR_CACHE_REQUEST,
    CLEAR_CACHE_RESPONSE,
    CLEAR_CHARGING_PROFILE_REQUEST,
    CLEAR_CHARGING_PROFILE_RESPONSE,
    CLEAR_DISPLAY_MESSAGE_REQUEST,
    CLEAR_DISPLAY_MESSAGE_RESPONSE,
    CLEAR_VARIABLE_MONITORING_REQUEST,
    CLEAR_VARIABLE_MONITORING_RESPONSE,
    CLEARED_CHARGING_LIMIT_REQUEST,
    CLEARED_CHARGING_LIMIT_RESPONSE,
    COST_UPDATED_REQUEST,
    COST_UPDATED_RESPONSE,
    CUSTOMER_INFORMATION_REQUEST,
    CUSTOMER_INFORMATION_RESPONSE,
    DATA_TRANSFER_REQUEST,
    DATA_TRANSFER_RESPONSE,
    DELETE_CERTIFICATE_REQUEST,
    DELETE_CERTIFICATE_RESPONSE,
    FIRMWARE_STATUS_NOTIFICATION_REQUEST,
    FIRMWARE_STATUS_NOTIFICATION_RESPONSE,
    GET15118_EV_CERTIFICATE_REQUEST,
    GET15118_EV_CERTIFICATE_RESPONSE,
    GET_BASE_REPORT_REQUEST,
    GET_BASE_REPORT_RESPONSE,
    GET_CERTIFICATE_STATUS_REQUEST,
    GET_CERTIFICATE_STATUS_RESPONSE,
    GET_CHARGING_PROFILES_REQUEST,
    GET_CHARGING_PROFILES_RESPONSE,
    GET_COMPOSITE_SCHEDULE_REQUEST,
    GET_COMPOSITE_SCHEDULE_RESPONSE,
    GET_DISPLAY_MESSAGES_REQUEST,
    GET_DISPLAY_MESSAGES_RESPONSE,
    GET_INSTALLED_CERTIFICATE_IDS_REQUEST,
    GET_INSTALLED_CERTIFICATE_IDS_RESPONSE,
    GET_LOCAL_LIST_VERSION_REQUEST,
    GET_LOCAL_LIST_VERSION_RESPONSE,
    GET_LOG_REQUEST,
    GET_LOG_RESPONSE,
    GET_MONITORING_REPORT_REQUEST,
    GET_MONITORING_REPORT_RESPONSE,
    GET_REPORT_REQUEST,
    GET_REPORT_RESPONSE,
    GET_TRANSACTION_STATUS_REQUEST,
    GET_TRANSACTION_STATUS_RESPONSE,
    GET_VARIABLES_REQUEST,
    GET_VARIABLES_RESPONSE,
    HEARTBEAT_REQUEST,
    HEARTBEAT_RESPONSE,
    INSTALL_CERTIFICATE_REQUEST,
    INSTALL_CERTIFICATE_RESPONSE,
    LOG_STATUS_NOTIFICATION_REQUEST,
    LOG_STATUS_NOTIFICATION_RESPONSE,
    METER_VALUES_REQUEST,
    METER_VALUES_RESPONSE,
    NOTIFY_CHARGING_LIMIT_REQUEST,
    NOTIFY_CHARGING_LIMIT_RESPONSE,
    NOTIFY_CUSTOMER_INFORMATION_REQUEST,
    NOTIFY_CUSTOMER_INFORMATION_RESPONSE,
    NOTIFY_DISPLAY_MESSAGES_REQUEST,
    NOTIFY_DISPLAY_MESSAGES_RESPONSE,
    NOTIFY_EV_CHARGING_NEEDS_REQUEST,
    NOTIFY_EV_CHARGING_NEEDS_RESPONSE,
    NOTIFY_EV_CHARGING_SCHEDULE_REQUEST,
    NOTIFY_EV_CHARGING_SCHEDULE_RESPONSE,
    NOTIFY_EVENT_REQUEST,
    NOTIFY_EVENT_RESPONSE,
    NOTIFY_MONITORING_REPORT_REQUEST,
    NOTIFY_MONITORING_REPORT_RESPONSE,
    NOTIFY_REPORT_REQUEST,
    NOTIFY_REPORT_RESPONSE,
    PUBLISH_FIRMWARE_REQUEST,
    PUBLISH_FIRMWARE_RESPONSE,
    PUBLISH_FIRMWARE_STATUS_NOTIFICATION_REQUEST,
    PUBLISH_FIRMWARE_STATUS_NOTIFICATION_RESPONSE,
    REPORT_CHARGING_PROFILES_REQUEST,
    REPORT_CHARGING_PROFILES_RESPONSE,
    REQUEST_START_TRANSACTION_REQUEST,
    REQUEST_START_TRANSACTION_RESPONSE,
    REQUEST_STOP_TRANSACTION_REQUEST,
    REQUEST_STOP_TRANSACTION_RESPONSE,
    RESERVATION_STATUS_UPDATE_REQUEST,
    RESERVATION_STATUS_UPDATE_RESPONSE,
    RESERVE_NOW_REQUEST,
    RESERVE_NOW_RESPONSE,
    RESET_REQUEST,
    RESET_RESPONSE,
    SECURITY_EVENT_NOTIFICATION_REQUEST,
    SECURITY_EVENT_NOTIFICATION_RESPONSE,
    SEND_LOCAL_LIST_REQUEST,
    SEND_LOCAL_LIST_RESPONSE,
    SET_CHARGING_PROFILE_REQUEST,
    SET_CHARGING_PROFILE_RESPONSE,
    SET_DISPLAY_MESSAGE_REQUEST,
    SET_DISPLAY_MESSAGE_RESPONSE,
    SET_MONITORING_BASE_REQUEST,
    SET_MONITORING_BASE_RESPONSE,
    SET_MONITORING_LEVEL_REQUEST,
    SET_MONITORING_LEVEL_RESPONSE,
    SET_NETWORK_PROFILE_REQUEST,
    SET_NETWORK_PROFILE_RESPONSE,
    SET_VARIABLE_MONITORING_REQUEST,
    SET_VARIABLE_MONITORING_RESPONSE,
    SET_VARIABLES_REQUEST,
    SET_VARIABLES_RESPONSE,
    SIGN_CERTIFICATE_REQUEST,
    SIGN_CERTIFICATE_RESPONSE,
    STATUS_NOTIFICATION_REQUEST,
    STATUS_NOTIFICATION_RESPONSE,
    TRANSACTION_EVENT_REQUEST,
    TRANSACTION_EVENT_RESPONSE,
    TRIGGER_MESSAGE_REQUEST,
    TRIGGER_MESSAGE_RESPONSE,
    UNLOCK_CONNECTOR_REQUEST,
    UNLOCK_CONNECTOR_RESPONSE,
    UNPUBLISH_FIRMWARE_REQUEST,
    UNPUBLISH_FIRMWARE_RESPONSE,
    UPDATE_FIRMWARE_REQUEST,
    UPDATE_FIRMWARE_RESPONSE,

    MESSAGE_TYPE_MAX,
    EVENT_SERVER_CONNECTED,
    EVENT_SERVER_DISCONNECTED,

    TOTAL_EVENT_MESSAGE,
} message_type_id;


typedef enum _CONFIG_ID_TYPE_ {
    CONFIG_RECONNECT_PARAM,
    TOTAL_CONFIG_ID,
} config_type_id;

typedef struct _RECONNECT_PARARM_ {
    uint32_t retryBackOffWaitMinimum;
    uint32_t retryBackOffRepeatTimes;
    uint32_t retryBackOffRandomRange;
} reconnect_param;

typedef void (*ocpp_func_ptr_t)(ocpp_event_t event, void* data, event_status status, void* context);

#define RETRY_BACKOFF_WAIT_MINIMUM 0x01
#define RETRY_BACKOFF_REPEAT_TIMES 0x02
#define RETRY_BACKOFF_RANDOM_RANGE 0x04

#ifdef __cplusplus
}
#endif

#endif /*!defined(_OCPP_TYPES_H_)*/
